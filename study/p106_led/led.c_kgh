#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/gpio.h>
#define OFF 0
#define ON 1
#define GPIOLEDCNT 8
#define GPIOKEYCNT 8

int gpioLed[GPIOLEDCNT] = {6, 7, 8, 9, 10, 11, 12, 13};

int gpioLedInit(void);
void gpioLedSet(long val);
void gpioLedFree(void);

static int hello_init(void)
{
	int ret;

	printk("Hello, world\n");

    // LED 관련
    ret = gpioLedInit();
    if (ret < 0)
        return ret;
    gpioLedSet(0xff);
    gpioLedFree();

	return 0;
}

static void hello_exit(void)
{
	int ret;

	printk("Goodbye, world\n");
    // LED 관련
    ret = gpioLedInit();
    //if (ret < 0)
       //return ret;
	gpioLedSet(0x00);
    gpioLedFree();
}

module_init(hello_init);
module_exit(hello_exit);

MODULE_LICENSE("Dual BSD/GPL");


int gpioLedInit(void)
{
    int i;
    int ret = 0; // 정상종료 초기값 // 리턴 값이 있는 함수가 모인 코드 블럭을 함수화 할대는 그 형을 맞춰주자
    char gpioName[10];

    for (i = 0; i < GPIOLEDCNT; i++)
    {
        sprintf(gpioName, "led%d", i);

        ret = gpio_request(gpioLed[i], gpioName);
        if (ret < 0)
        {
            printk("Failed gpio_request() gpio%d error\n", i);
            return ret;
        }

        ret = gpio_direction_output(gpioLed[i], OFF);
        if (ret < 0)
        {
            printk("Failed gpio_direction_output() gpio%d error\n", i);
            return ret;
        }
    }

    return ret;
}

void gpioLedSet(long val)
{
    int i;

    for (i = 0; i < GPIOLEDCNT; i++)
    {
        gpio_set_value(gpioLed[i], (val >> i) & 0x01);
    }
}

void gpioLedFree(void)
{
    int i;

    for (i = 0; i < GPIOLEDCNT; i++)
    {
        gpio_free(gpioLed[i]);
    }
}


